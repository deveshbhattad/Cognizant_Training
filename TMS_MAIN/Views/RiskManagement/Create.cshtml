@* Views/RiskManagement/Create.cshtml *@
@model TMS_MAIN.Models.Risk

@{
    ViewData["Title"] = "Create New Risk Assessment";
    Layout = "~/Views/Shared/_TreasurerLayout.cshtml";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=wrap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="~/css/treasurer-dashboard.css" rel="stylesheet" />
    <style>
        /* Navbar Styling */
        .navbar {
            background-color: #343a40 !important;
        }

        .navbar-brand, .nav-link {
            color: white !important;
        }

        .navbar-title {
            color: white !important;
            font-size: 1.5rem;
            margin-left: 30px;
        }

        /* --- NEW/MODIFIED CSS --- */
        /* This class will push down the content below the fixed navbar */
        .content-container-offset {
            padding-top: 70px; /* Adjust this value. A standard Bootstrap 5 navbar is about 56px, so 70px gives a bit of breathing room. */
        }
        /* Remove the old #box margin-top if it's still there and relying on it.
                   If #box is your main content wrapper, apply padding-top directly to it. */
        #box {
            padding: 20px; /* Keep your existing padding */
             margin-top: 200px; 
        }
        /* --- END NEW/MODIFIED CSS --- */
    </style>
}


<br />
<br />
<br />
<div id="box" class="container mt-4 content-container-offset">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-lg">
                <div class="card-header bg-success text-white">
                    <h1 class="text-center mb-0">Create New Risk Assessment</h1>
                </div>
                <div class="card-body">
                    <form id="createRiskForm" asp-action="Create" asp-controller="RiskManagement" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        @* RiskId is typically auto-generated or not set by user on Create *@
                        <div class="mb-3">
                            <label asp-for="RiskId" class="form-label"></label>
                            <input asp-for="RiskId" class="form-control" />
                            <span asp-validation-for="RiskId" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="RiskType" class="form-label"></label>
                            <select asp-for="RiskType" class="form-select" id="riskTypeDropdown">
                                <option value="">-- Select Risk Type --</option>
                                <option value="Currency Fluctuation">Currency Fluctuation</option>
                       
                                <option value="Liquidity Risk">Liquidity Risk</option>
                               
                                <option value="Interest Rate Risk">Interest Rate Risk</option>
                               
                                
                            </select>
                            <span asp-validation-for="RiskType" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="TransactionReference" class="form-label"></label>
                            <input asp-for="TransactionReference" class="form-control" />
                            <span asp-validation-for="TransactionReference" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Amount" class="form-label">Transaction Amount:</label>
                            <input asp-for="Amount" type="number" step="0.01" class="form-control" id="amountInput" />
                            <span asp-validation-for="Amount" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Impact" class="form-label">Impact (1-5):</label>
                            <input asp-for="Impact" type="number" min="1" max="5" class="form-control" id="impactInput" />
                            <span asp-validation-for="Impact" class="text-danger"></span>
                            <small class="form-text text-muted">1=Negligible, 3=Moderate, 5=Critical</small>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Probability" class="form-label">Probability (1-5):</label>
                            <input asp-for="Probability" type="number" min="1" max="5" class="form-control" id="probabilityInput" />
                            <span asp-validation-for="Probability" class="text-danger"></span>
                            <small class="form-text text-muted">1=Rare, 3=Possible, 5=Very Likely</small>
                        </div>





                        <div class="form-group">
                            <label asp-for="AssessmentDate" class="form-label"></label>
                            <input asp-for="AssessmentDate" class="form-control" placeholder="dd-mm-yyyy" />
                            <span asp-validation-for="AssessmentDate" class="text-danger"></span>
                        </div>

                        <div class="d-grid gap-2 mt-4">
                            <input type="submit" value="Create Risk Assessment" class="btn btn-success btn-lg" />
                            <a asp-action="RMIndex" asp-controller="RiskManagement" class="btn btn-outline-secondary btn-lg">Back to List</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Check if these elements exist before trying to add event listeners
            const suggestValuesBtn = document.getElementById('suggestValuesBtn');
            const riskTypeDropdown = document.getElementById('riskTypeDropdown');
            const amountInput = document.getElementById('amountInput');
            const impactInput = document.getElementById('impactInput');
            const probabilityInput = document.getElementById('probabilityInput');
            const riskScoreDisplay = document.getElementById('RiskScore');
            const riskLevelDisplay = document.getElementById('RiskLevel');

            if (suggestValuesBtn) { // Only add listener if the button exists
                suggestValuesBtn.addEventListener('click', async function () {
                    const currentRiskData = {
                        riskType: riskTypeDropdown ? riskTypeDropdown.value : '', // Check for existence
                        amount: amountInput ? (parseFloat(amountInput.value) || 0) : 0, // Check for existence
                        impact: impactInput ? (parseInt(impactInput.value) || 0) : 0, // Check for existence
                        probability: probabilityInput ? (parseInt(probabilityInput.value) || 0) : 0, // Check for existence
                    };

                    // Basic client-side validation for suggestion
                    if (currentRiskData.impact < 1 || currentRiskData.impact > 5 || currentRiskData.probability < 1 || currentRiskData.probability > 5) {
                        alert('Please ensure Impact and Probability are between 1 and 5.');
                        return;
                    }
                    if (!currentRiskData.riskType) {
                        alert('Please select a Risk Type.');
                        if (riskTypeDropdown) riskTypeDropdown.focus();
                        return;
                    }

                    try {
                        const response = await fetch('/RiskManagement/SuggestValues', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify(currentRiskData)
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error('Error suggesting values:', errorText);
                            alert('Failed to suggest values: ' + response.statusText + '. Details: ' + errorText.substring(0, 100) + '...');
                            return;
                        }

                        const suggestedValues = await response.json();

                        if (riskScoreDisplay && suggestedValues.riskScore !== undefined && suggestedValues.riskScore !== null) {
                            riskScoreDisplay.value = suggestedValues.riskScore.toFixed(2);
                        }
                        if (riskLevelDisplay && suggestedValues.riskLevel) {
                            riskLevelDisplay.value = suggestedValues.riskLevel;
                        }

                    } catch (error) {
                        console.error('Network or parsing error:', error);
                        alert('An error occurred while suggesting values. Please try again.');
                    }
                });
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/treasurer-dashboard.js"></script>
}